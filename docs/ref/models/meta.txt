=======================
Model ``_meta`` options
=======================

.. module:: django.db.models.options
   :synopsis: Model meta-class layer

.. class:: Options

The Options API is at the core of Django, it enables other parts of the
system such as lookups, queries, forms, and the admin to understand the
capabilities of every model. The ``Options API`` is hidden under the
``_meta`` attribute of each model class.

.. versionadded:: 1.8

Options can be used for:

* Retrieving all field names of a model
* Retrieving all field instances names of a model
* Retrieving a single field by name

.. _model-meta-field-types:

Field Types
===========

A model can have several types of fields:

Data fields
~~~~~~~~~~~

A field that requires a single column on the database. For
example a ``CharField``, ``BooleanField``, a ``ForeignKey``.

Many-to-many fields
~~~~~~~~~~~~~~~~~~~

A field that defines a many-to-many relation. For example
a ``ManyToManyField``.

Virtual fields
~~~~~~~~~~~~~~~~~~~

Virtual fields are model fields that do not necessarily have a corresponding
database column. they are model fields such as
:class:`django.contrib.contenttypes.fields.GenericForeignKey`.

.. code-block:: python

    class Person(models.Model):
        content_type = models.ForeignKey(ContentType, related_name='+')
        object_id_ = models.PositiveIntegerField()
        item = GenericForeignKey('content_type', 'object_id')

:class:`django.contrib.contenttypes.fields.GenericForeignKey` uses ``content_type``
and ``object_id`` to keep track of what model type and id is set to ``item``, but
``item`` itself does not have a concrete presence on the database.  In this case,
``item`` is a virtual field.

.. _model-meta-field-categories:

Field Categories
================

Each field type fits into one of these categories:

A Pure field
~~~~~~~~~~~~

A field that is self sufficient on its own, and dosen't involve connections
with any other model. For example a ``CharField`` and ``BooleanField``.

A Relation field
~~~~~~~~~~~~~~~~

A field that defines a relation pointing to another model. For example a
``ManyToManyField``, a ``ForeignKey``, and a ``GenericForeignKey``.

A Related field
~~~~~~~~~~~~~~~

A link that is created as a consequence of a Relation field pointing to a
model. A related field is an inverse link from the pointed model to the
relation model. For example a ``GenericObject``, and a ``GenericRelation``.

.. code-block:: python

    class City(models.Model):
        name = models.CharField(max_length=100)

    class Person(models.Model):
        city = models.ForeignKey(City)

In this case, ``City`` has a related field from ``Person``

Field categories example
========================

Below is a field category X field type matrix of each possible combination:

+---------------+---------------+------------------+-------------------+
|               | Data field    | M2M field        | Virtual field     |
+===============+===============+==================+===================+
| Pure field    | CharField     | <Does not exist> | CompositeField    |
+---------------+---------------+------------------+-------------------+
|Relation field | ForeignKey    | ManyToManyField  | GenericForeignKey |
+---------------+---------------+------------------+-------------------+
|Related field  | RelatedObject | RelatedObject    | GenericRelation   |
+---------------+---------------+------------------+-------------------+

.. _model-meta-field-filters:

Field Filters
=============

There are several properties that each field can have.

We can use these properties as filters for :meth:`Options.get_fields()`.

Local
~~~~~

A local field is one that's declared directly on a model and not derived from inheritance.
Fields from models that directly inherit from abstract models or proxy classes are still
local.

.. code-block:: python

    class Person(models.Model):
        name = models.CharField(max_length=50)

    class Londoner(Person):
        overdraft = models.DecimalField()

``Londoner`` has two fields (``name`` and ``overdraft``) but only one local field
(``overdraft``).

Hidden
~~~~~~

Hidden fields are only referred to related objects and related many-to-many.  When a
relational model (such as :class:`django.db.models.ManyToManyField`, or
:class:`django.db.models.ForeignKey`) specifies a ``related_name`` that starts with a
"+", it tells Django to not create a reverse relation.

.. code-block:: python

    class City(models.Model):
        name = models.CharField(max_length=100)

    class Person(models.Model):
        city = models.ForeignKey(City, related_name='+')

``City`` has a related hidden object from ``Person`` (as you can't access ``person_set``)

``Options API``
===============

Retrieve a field instance by name
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. method:: Options.get_field(field_name, include_related=False)

    Returns the field instance given a name of a field.

    ``field_name`` can be the name of a field on a model or it can also be a reverse relation
    name (related query name).

    By default, :meth:`Options.get_field()` will only search fields that are pure or a
    relation, but all field types can be queried.
    If the ``include_related`` flag is on, also related objects will be searched.
    Hidden and proxied relations are not available. If a field with the given name is not
    found it will raise a `FieldDoesNotExist`` exception.

    .. code-block:: python

        >>> from django.contrib.auth.models import User

        >>> User._meta.get_field('username')#  A data field
        <django.db.models.fields.CharField: username>

        >>> User._meta.get_field('logentry', include_related=True)#  A related object
        <RelatedObject: admin:logentry related to user>

        >>> LogEntry._meta.get_field('user')#  ForeignKey can be queried by field name
        <django.db.models.fields.related.ForeignKey: user>
        >>> LogEntry._meta.get_field('user_id')#  .. and also by database column name
        <django.db.models.fields.related.ForeignKey: user>

        >>> User._meta.get_field('does_not_exist')#  A non existent field
        Traceback (most recent call last):
            ...
        FieldDoesNotExist: User has no field named 'does_not_exist'

    .. note::
        The default arguments of :meth:`Options.get_field()` might not be what you expect.
        :meth:`Options.get_fields()` only enables data fields, while :meth:`Options.get_field()`
        enables data and m2m. This is because of backwards-compatibility
        issues (read more in :meth:`Options.get_fields()`)

Retrieve all field names
~~~~~~~~~~~~~~~~~~~~~~~~

.. attribute:: Options.field_names

    Returns a list of all field names (including reverse relations) on the
    current model.

    .. code-block:: python

        >>> User._meta.field_names
        ['username', 'first_name', 'last_name', 'logentry',
         'is_active', 'email', 'is_superuser', 'is_staff',
         'last_login', 'groups', 'user_permissions', 'password',
         'id', 'date_joined']

                   

Retrieve field instances
~~~~~~~~~~~~~~~~~~~~~~~~

.. method:: Options.get_fields(pure_m2m=False, pure_data=True, pure_virtual=False,
                               relation_m2m=False, relation_data=True, relation_virtual=False,
                               related_m2m=False, related_objects=False, related_virtual=False,
                               include_parents=True, include_hidden=False)

    Returns a list of fields given a list of field types and filters.

    get_fields() takes a set of flags as parameters and returns a tuple of field instances.
    The flags are a combination of field types and field filters.

    .. code-block:: python

        >>> User._meta.get_fields() # Only data by default
        (<django.db.models.fields.AutoField: id>,
         <django.db.models.fields.CharField: password>,
         <django.db.models.fields.DateTimeField: last_login>,
         <django.db.models.fields.BooleanField: is_superuser>,
         <django.db.models.fields.CharField: username>,
         <django.db.models.fields.CharField: first_name>,
         <django.db.models.fields.CharField: last_name>,
         <django.db.models.fields.EmailField: email>,
         <django.db.models.fields.BooleanField: is_staff>,
         <django.db.models.fields.BooleanField: is_active>,
         <django.db.models.fields.DateTimeField: date_joined>)

        >>> User._meta.get_fields(pure_data=False, relation_objects=False, related_objects=True) # only related_objects
        (<RelatedObject: admin:logentry related to user>,)

        >>> User._meta.get_fields(pure_data=False, relation_objects=True, related_objects=True, include_hidden=True) # only related_objects including hidden
        (<RelatedObject: auth:user_groups related to user>,
         <RelatedObject: auth:user_user_permissions related to user>,
         <RelatedObject: admin:logentry related to user>)

        The flags are a combination of field types and field filters. All possible combinations
        of filters and fields are possible, although some will have no effect (such as
        ``include_hidden`` combined with ``pure_data`` or ``pure_m2m`` by itself).

    +-----------------+-------------------------+--------------------------------+
    |                 | Include Hidden          | Include Parents                |
    +=================+=========================+================================+
    | Pure data       |                         | Does recursive call to parents |
    +-----------------+-------------------------+--------------------------------+
    | Pure M2M        |                         | Does recursive call to parents |
    +-----------------+-------------------------+--------------------------------+
    | Pure virtual    |                         |                                |
    +-----------------+-------------------------+--------------------------------+
    | Relation data   |                         | Does recursive call to parents |
    +-----------------+-------------------------+--------------------------------+
    | Relation virtual|                         |                                |
    +-----------------+-------------------------+--------------------------------+
    | Relation M2M    |                         | Does recursive call to parents |
    +-----------------+-------------------------+--------------------------------+
    | Related data    | Adds hidden relations   | Does recursive call to parents |
    +-----------------+-------------------------+--------------------------------+
    | Related M2M     |                         | Does recursive call to parents |
    +-----------------+-------------------------+--------------------------------+
    | Related virtual |                         |                                |
    +-----------------+-------------------------+--------------------------------+

``Fast-Access API``
===================

In order to provide a simple and usable API for developers to use, Django provides some
Fast-access endpoints that are used by Django internally. The reason these APIs exist
is to ensure field access is always fast. This API is composed of a specific set of
properties that are cached on first access, and are guaranteed to be fast. If you have
the choice between using a fast-access API or using one of the functional APIs, it is
recommended to use the fast-access API for performance reasons.

.. attribute:: Options.fields

    Returns a list of all pure and relation data fields.

.. attribute:: Options.concrete_fields

    Returns a list of all concrete pure and relation data fields.

.. attribute:: Options.local_concrete_fields

    Returns a list of all concrete pure and relation data fields that have not been
    inherited from another model.

.. attribute:: Options.many_to_many

    Returns a list of all pure and relation many-to-many fields.

.. attribute:: Options.related_objects

    Returns a list of all related data objects.

.. attribute:: Options.related_m2m

    Returns a list of all related m2m objects.
